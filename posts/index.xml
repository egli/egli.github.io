<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Archive on egli.dev</title>
    <link>http://egli.dev/posts/</link>
    <description>Recent content in Archive on egli.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 20 Sep 2018 13:52:47 +0200</lastBuildDate>
    
	<atom:link href="http://egli.dev/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Fulltext Search in org-mode</title>
      <link>http://egli.dev/posts/fulltext-search-in-org-mode/</link>
      <pubDate>Thu, 20 Sep 2018 13:52:47 +0200</pubDate>
      
      <guid>http://egli.dev/posts/fulltext-search-in-org-mode/</guid>
      <description>&lt;p&gt;
Quite often I&amp;#39;m trying to find something that I jotted down in one of
my many org-mode files somewhere. This usually amounts to something
like
&lt;/p&gt;
&lt;div class=&#34;src src-shell&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;M-x rgreg RET foo RET *.org RET ~/ RET&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Then I wait until grep has finished rummaging trough my home
directory. Wouldn&amp;#39;t it be nice if there was something like fulltext
search for org-mode files, i.e. if there was a tool that would index
all my files and provide for a fast search capability?
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Why reimplementing liblouis in Java is a waste of your time</title>
      <link>http://egli.dev/posts/why-reimplementing-liblouis-in-java-is-a-waste-of-your-time/</link>
      <pubDate>Mon, 04 May 2015 17:25:40 +0000</pubDate>
      
      <guid>http://egli.dev/posts/why-reimplementing-liblouis-in-java-is-a-waste-of-your-time/</guid>
      <description>&lt;p&gt;
There are some proponents of the &lt;a href=&#34;https://github.com/snaekobbi&#34;&gt;Braille in DAISY Pipeline 2 project&lt;/a&gt;
who would like to re-implement &lt;a href=&#34;https://github.com/liblouis/liblouis&#34;&gt;liblouis&lt;/a&gt; in Java. While I would much
rather hack in Java than in C I still think it&amp;#39;s not a good idea to
re-implement liblouis in Java.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Delete a file after it&#39;s being served</title>
      <link>http://egli.dev/posts/delete-a-file-after-its-being-served/</link>
      <pubDate>Mon, 10 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://egli.dev/posts/delete-a-file-after-its-being-served/</guid>
      <description>Seen on #clojure:  nonuby : any thoughts for best approach to delete a file after its being served by ring since returning { :body (FileInputStream. &amp;#34;/tmp/123324.pdf&amp;#34;) }. Im thinking of decorator approach where .close then delete the files after passing .close to the inner inputstream  justin_smith : nonuby: what if you never put it on disk in the first place, and just handed an input stream that would be garbage collected to the client?</description>
    </item>
    
    <item>
      <title>We have macros</title>
      <link>http://egli.dev/posts/we-have-macros/</link>
      <pubDate>Fri, 24 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://egli.dev/posts/we-have-macros/</guid>
      <description>&lt;p&gt;
Welcome to the dark side. We have macros.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Continuous integration for liblouis</title>
      <link>http://egli.dev/posts/travis-for-liblouis/</link>
      <pubDate>Thu, 23 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://egli.dev/posts/travis-for-liblouis/</guid>
      <description>&lt;p&gt;
Once in a while when creating a pull request for projects on github I&amp;#39;m
pleasantly surprised that this automatically launches a build server,
runs the test suite for the project and hopefully gives you a green
light for your pull request.
&lt;/p&gt;
&lt;p&gt;
For liblouis we did have a self-hosted continuous integration solution
based on Jenkins for a long time but it seems to have fallen prey to
some bit rot.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using the maven release plugin with gpg-agent</title>
      <link>http://egli.dev/posts/using-the-maven-release-plugin-with-gpg-agent/</link>
      <pubDate>Fri, 06 Dec 2013 15:42:55 +0000</pubDate>
      
      <guid>http://egli.dev/posts/using-the-maven-release-plugin-with-gpg-agent/</guid>
      <description>When creating releases using the maven release and the pgp plugin you are asked to sign your release. Due to an annoying bug in the release plugin you&amp;#39;ll never see the prompt and mvn will just hang. One way to get around this is to use the gpg-agent and to trigger gpg action before building the release so that gpg-agent will cache your passphrase (at least for some time).</description>
    </item>
    
    <item>
      <title>Using dh_make to generate debian control files</title>
      <link>http://egli.dev/posts/using_dh_make_to_generate_debian_control_files/</link>
      <pubDate>Fri, 11 Oct 2013 13:53:55 +0000</pubDate>
      
      <guid>http://egli.dev/posts/using_dh_make_to_generate_debian_control_files/</guid>
      <description>In order to properly deploy software to the production servers ideally it should be packaged as a Debian package. This ensures that I have all the needed dependencies, that the server is restarted and all the files are removed would I ever remove the package.  For Maven based projects such as the DAISY Pipeline this means that you&amp;#39;ll be using a Maven plugin such as jdeb to create the deb automatically.</description>
    </item>
    
    <item>
      <title>A static website for liblouis based on Jekyll</title>
      <link>http://egli.dev/posts/a-static-website-for-liblouis/</link>
      <pubDate>Fri, 04 Oct 2013 09:21:55 +0000</pubDate>
      
      <guid>http://egli.dev/posts/a-static-website-for-liblouis/</guid>
      <description>&lt;p&gt;
I must say that I really enjoy working with &lt;a href=&#34;http://jekyllrb.com&#34;&gt;Jekyll&lt;/a&gt;. It is dead-simple
and still powerfull enough to the things I need. At first I was trying
to go for a &lt;a href=&#34;http://clojure.org&#34;&gt;Clojure&lt;/a&gt; based solution such as &lt;a href=&#34;https://github.com/nakkaya/static&#34;&gt;static&lt;/a&gt; or &lt;a href=&#34;https://github.com/algernon/madness&#34;&gt;madness&lt;/a&gt;. I had
looked at static before and I like it, however I wanted to use
&lt;a href=&#34;http://getbootstrap.com/&#34;&gt;bootstrap&lt;/a&gt; and wasn&amp;#39;t really into converting the bootstrap html to a
&lt;a href=&#34;https://github.com/weavejester/hiccup&#34;&gt;hiccup&lt;/a&gt; template. madness on the other hand uses &lt;a href=&#34;https://github.com/cgrand/enlive&#34;&gt;enlive&lt;/a&gt;, so it would
have been possible to use html templates, but what I didn&amp;#39;t like was
the fact that the generator and the actual site were basically the
same code base just in different (git) branches.
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>